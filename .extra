export ARCHFLAGS="-arch x86_64"

# ruby
export RBENV_ROOT=/usr/local/var/rbenv
if which rbenv > /dev/null; then eval "$(rbenv init -)"; fi

# cache pip-installed packages to avoid re-downloading
export PIP_DOWNLOAD_CACHE=$HOME/.pip/cache


#### virtualenvwrapper
export VIRTUALENV_PYTHON=/usr/local/bin/python
export PIP_VIRTUALENV_BASE=$HOME/Documents/virtualenvs
export PIP_REQUIRE_VIRTUALENV=true
export WORKON_HOME=$HOME/Documents/virtualenvs
export PROJECT_HOME=$HOME/Documents/projects
export VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python
export VIRTUALENVWRAPPER_VIRTUALENV=/usr/local/bin/virtualenv
source /usr/local/bin/virtualenvwrapper.sh


export DJANGO_DIR=$HOME/Documents/virtualenvs/libs/django
# this is for wxpython see https://us.pycon.org/2012/community/tutorials/245/
export APPDATA=~/Documents/wxpython_appdata


# python / projects

function mkproject3
{
  mkproject -p /usr/local/bin/python3 "$@"
}

function mkvirtualenv3
{
  mkvirtualenv -p /usr/local/bin/python3 "$@"
}

function syspip
{
  PIP_REQUIRE_VIRTUALENV=false pip "$@"
}

function syspip3
{
  PIP_REQUIRE_VIRTUALENV=false pip3 "$@"
}

function rmproject() {
    if [[ ! -z $VIRTUAL_ENV && $(basename $VIRTUAL_ENV) == $1 ]]; then
        deactivate
    fi
    rmvirtualenv $1
    rm -r $PROJECT_HOME/$1
}


### webdev / django projects

function newkey
{
  ssh-keygen -t rsa -C "julien.aubert.mail@gmail.com" -f ~/.ssh/id_rsa.$1
}

function brunchwatch
{
  ./bower_assets.sh
  brunch w -s 
}

function browserstack-server()
{ 
  KEY="4kdEeXz3yq2mgWscSX3z"
  BrowserStackLocal $KEY "$@"
}

function browserstack-file()
{ 
  KEY="4kdEeXz3yq2mgWscSX3z"
  BrowserStackLocal -f $KEY "$@"
}

function djangoproject
{
   django-admin.py startproject \
            -e rst \
            -e pip \
            -e py \
            -e txt \
            -n Makefile \
            -n README \
            -n MANIFEST.in \
            -n .coveragerc \
            -n tox.ini \
            -n globals \
            --template /Users/julien/Documents/projects/django_chocolate_project/django_chocolate_project/ \
            $1 ../$1/
   make install-deps
}

function mkdjangoproject
{
   mkproject $1
   pip install django
   djangoproject $1
}

function mkdjangoproject3
{
   mkproject -p /usr/local/bin/python3 $1
   pip install django
   djangoproject $1
}


### misc functions

function rmpyc
{
  find . -name '*.pyc' -delete
}

function pretty()
{
  python -m json.tool < "$1"
}

function pygrep()
{
  find . -type f -name "*.py" | xargs grep "$@" 
}

function htmlgrep()
{
  find . -type f -name "*.html" | xargs grep "$@" 
}

function scssgrep() 
{
  find . -type f -name "*.scss" | xargs grep "$@"
}

function jsgrep()
{
  find . -type f -name "*.js" | xargs grep "$@" 
}


### GIT

GIT_AUTHOR_NAME="Julien Aubert"
GIT_COMMITTER_NAME="$GIT_AUTHOR_NAME"
git config --global user.name "$GIT_AUTHOR_NAME"
GIT_AUTHOR_EMAIL="julien.aubert.mail@gmail.com"
GIT_COMMITTER_EMAIL="$GIT_AUTHOR_EMAIL"
git config --global user.email "$GIT_AUTHOR_EMAIL"

# runs git grep on a pattern, and then uses git blame to who did it
function ggb() {
  git grep -n "$@" | 
    while IFS=":-" read i j k; do 
      if [ "$i" != "" ]; then
	git blame -L $j,$j $i | cat; 
      fi
    done
}

function eqbranch()
{
  BRANCH_A=$1
  BRANCH_B=$2
  if [ x"$(git rev-parse $BRANCH_A)" = x"$(git rev-parse $BRANCH_B)" ]
  then
    echo $BRANCH_A and $BRANCH_B are the same
  fi
}



